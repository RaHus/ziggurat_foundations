This is pyramid_reactor

Framework agnostic (with slight bias towards pyramid) set of sqlalchemy 
classes that make building applications that require permissions an easy task.

pyramid_reactor supplies a set of *sqlalchemy mixins* that can be used to extend
models in your application. The aim of this project is to supply set of generic 
models that cover the most common needs in application development when it comes 
to authorization - using flat and tree like data structures.

So far following basics are supplied:

User - base for user accounts
Group - container for many users 
Resource - Arbitrary database entity that can represent various object 
           hierarchies - blogs, forums, cms documents, pages etc.

Currently following information and data manipulation is supported:

 - assigning arbitrary permissions directly to users (ie. access admin panel) 
 - assigning users to groups
 - assigning arbitrary permissions to groups 
 - assigning arbitrary resource permissions to users (ie. only user X can access  private forum)
 - assigning arbitrary resource permissions to groups 
 
The sqlalchemy mixins make all the interactions easy to use in your application 
and save development time.

Example usage:

assigning custom "read" permission for user "foo" for a given resource

permission = UserResourcePermission()
permission.perm_name = "read"
permission.user_name = "foo"
resource.user_permissions.append(permission)   

fetching all resources with permissions "edit", "vote"

user.resources_with_perms(["edit","vote"])

fetching all non-resource based permissions for user

user.permissions

given a resource fetching all permissions for user, both direct and  
inherited from groups user belongs to

resource.perms_for_user(user_instance)

and a lot more...



How to implement models in your applications:
(class names like User inside pyramid_reactor.models namespace CAN NOT 
 be changed because they are reused in various queries) 

import pyramid_reactor.models
from pyramid_reactor.models import BaseModel, UserMixin, GroupMixin
from pyramid_reactor.models import GroupPermissionMixin, UserGroupMixin 
from pyramid_reactor.models import GroupResourcePermissionMixin, ResourceMixin 
from pyramid_reactor.models import UserPermissionMixin, UserResourcePermissionMixin
#this is needed for pylons 1.0 / akhet approach to db session
pyramid_reactor.models.DBSession = DBSession #optional for folks who pass request.db to model methods


class Group(GroupMixin, Base):
    pass
pyramid_reactor.models.Group = Group

class GroupPermission(GroupPermissionMixin, Base):
    pass
pyramid_reactor.models.GroupPermission = GroupPermission

class UserGroup(UserGroupMixin, Base):
    pass
pyramid_reactor.models.UserGroup = UserGroup

class GroupResourcePermission(GroupResourcePermissionMixin, Base):
    pass
pyramid_reactor.models.GroupResourcePermission = GroupResourcePermission

class Resource(ResourceMixin, Base):
    pass
pyramid_reactor.models.Resource = Resource

class UserPermission(UserPermissionMixin, Base):
    pass
pyramid_reactor.models.UserPermission = UserPermission

class UserResourcePermission(UserResourcePermissionMixin, Base):
    pass
pyramid_reactor.models.UserResourcePermission = UserResourcePermission
        
class User(UserMixin, Base):
    pass
pyramid_reactor.models.User = User